(load 'friend-auth-interactive-form.repl)
(use 'friend-auth-interactive-form.repl)
(start-server)
(use 'friend-auth-interactive-form.repl :relaod)
(use 'friend-auth-interactive-form.repl :reload)
(start-server)
(stop-server)
(use 'friend-auth-interactive-form.routes.home)
()
(verify-credentials {:username "friend" :password "clojure"})
(users)
(@users)
(str @users)
@users
(use '')
(use 'friend-auth-interactive-form.models.user)
(exit)
(user 'friend-auth-interactive-form.models.user)
(use 'friend-auth-interactive-form.models.user)
(exit)
(use 'friend-auth-interactive-form.models.user)
(find-users-with-username 'rafael')
(find-users-with-username "rafael")
(use 'friend-auth-interactive-form.models.user :reload)
(find-users-with-username "rafael")
(use 'friend-auth-interactive-form.models.user :reload)
(ins)
(use 'friend-auth-interactive-form.models.user :reload)
(insert-user 'frie')
(use 'friend-auth-interactive-form.models.user :reload)
(insert-user 'frie')
(use 'friend-auth-interactive-form.models.user :reload)
(add-default-users)
(use 'friend-auth-interactive-form.models.user :reload)
(add-default-users)
(find-users-with-username "rafael")
(find-users-with-username "friend")
(use 'friend-auth-interactive-form.models.user :reload)
(find-users-with-username "friend")
(find-users-with-username "friend1")
(use 'friend-auth-interactive-form.models.user :reload)
(find-users-with-username "friend1")
(find-users-with-username "friend")
(use 'friend-auth-interactive-form.routes.home)
(use 'friend-auth-interactive-form.routes.home :reload)
(verify-db-credentials {:username "rafael" :password "123"})
(verify-db-credentials {:username "friend" :password "123"})
(verify-db-credentials {:username "friend" :password "clojure"})
(use 'friend-auth-interactive-form.routes.home :reload)
(verify-db-credentials {:username "friend" :password "123"})
(verify-db-credentials {:username "rafael" :password "123"})
(verify-db-credentials {:username "friend" :password "clojure"})
(use 'friend-auth-interactive-form.routes.home :reload)
(verify-db-credentials {:username "friend" :password "clojure"})
(use 'friend-auth-interactive-form.routes.home :reload)
(use 'friend-auth-interactive-form.models.user :reload)
(use 'friend-auth-interactive-form.routes.home :reload)
(verify-db-credentials {:username "friend" :password "clojure"})
(verify-db-credentials {:username "friend" :password "clojure1"})
(verify-db-credentials {:username "friend" :password "clojure"})
(verify-db-credentials {:username "friend1" :password "clojure"})
(verify-db-credentials {:username "friend" :password "clojure"})
(exot)
(exit)
(use 'friend-auth-interactive-form.repl)
(start-server)
(exit)
(require 'friend-auth-interactive-form.models.user :reload)
(add-default-users(
(add-default-users)
(require 'friend-auth-interactive-form.models.user :reload)
(add-default-users)
(first nil)
(exit)
(use 'friend-auth-interactive-form.models.user :reload)
(add-default-roles)
(use 'friend-auth-interactive-form.models.user :reload)
(add-default-data)
(exit)
(apply str #{"1"})
(apply str #{"1" "2"})
(apply str "," #{"1" "2"})
(apply str #{"1" "2"})
(interpose #{1})
(join "," #{"1" "2"})
(join #{"1" "2"})
(clojure.string/join #{"1" "2"})
(clojure.string/join #{"1" "2"} ", ")
(clojure.string/join #{"1" "2"})
(interpose "," #{1})
(interpose "," #{1 2})
(interpose "," #{1 2 3})
(apply str (interpose "," #{1 2 3}))
