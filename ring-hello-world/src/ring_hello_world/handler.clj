(ns ring-hello-world.handler
  (:require [ring.util.response :refer [response]]
            [ring.middleware.keyword-params :refer [wrap-keyword-params]]
            [ring.middleware.params :refer [wrap-params]]))

(defn init []
  (println "ring-hello-world is starting"))

(defn destroy []
  (println "ring-hello-world is shutting down"))

(defn handler [request]
  (response
    (str "<html><body>Hello World</br>The Request contains:</br>"
      (apply str (for [[k v] request] (str "<b>" k "</b> -> " v "</br>"))) "</body></html>")))

;This middleware function adds a "Content-Type" header to every response generated by the handler.
(defn wrap-content-type [handler content-type]
  (fn [request]
    (let [response (handler request)]
      (assoc-in response [:headers "Content-Type"] content-type))))

(def app
  (-> handler
    (wrap-content-type "text/html")
    (wrap-keyword-params)
    (wrap-params)))